const sequelize = require("../database/dbConn");
const { DataTypes } = require("sequelize");

const Country = require("./countryModel");
const Role = require("./roleModel");

const User = sequelize.define(
  "users",
  {
    id: { type: DataTypes.INTEGER, autoIncrement: true, primaryKey: true },
    userPId: { type: DataTypes.STRING(7), allowNull: false, unique: true },// id generated by system
    fullName: {
      type: DataTypes.STRING(30),
      allowNull: false,
      validate: {
        notNull: { msg: "Missing fullName field" },
        len: {
          args: [3, 30],
          msg: "Length must be between 3 and 30 characters",
        },
        isAlpha: { msg: "Only alphabets allowed" },
      },
    },
    userName: {
      type: DataTypes.STRING(10),
      allowNull: false,
      unique: true,
      validate: {
        notNull: { msg: "Missing userName field" },
        len: {
          args: [4, 10],
          msg: "Length must be between 4 and 10 characters",
        },
        isAlphanumeric: { msg: "Only alphabets and numbers are allowed" },
      },
    },
    password: {
      type: DataTypes.STRING(64),
      allowNull: false,
      validate: {
        notNull: { msg: "Missing password field" },
        len: {
          args: [6, 12],
          msg: "Length must be between 6 and 12 characters",
        },
        is: {
          args: "^(?=.*[A-Z a-z])(?=.*d)(?=.*[#$@!%&*?])[A-Za-zd#$@!%&*?]{6,12}$",
          msg: "Password must contain at least one letter and one number and one special character",
        },
      },
    },
    email: {
      type: DataTypes.STRING(125),
      allowNull: false,
      validate: {
        notNull: { msg: "Missing email field" },
        isEmail: { msg: "Invalid email" },
      },
    },
    countryId: {
      type: DataTypes.INTEGER,
      references: { model: "countries", key: "id" },
    },
    mobile: {
      type: DataTypes.STRING(16),
      allowNull: false,
      validate: {
        notNull: { msg: "Missing mobile field" },
        len: {
          args: [10, 16],
          msg: "Length must be between 10 and 16 characters",
        },
        isNumeric: { msg: "Only numbers are allowed" },
      },
    },
    logo: {
      type: DataTypes.STRING(255),
      validate: {
        isUrl: { msg: "Invalid URL" },
        len: {
          args: [0, 255],
          msg: "Maximum 255 characters are allowed",
        },
      },
    },
    isActive: { type: DataTypes.BOOLEAN, allowNull: false, defaultValue: true },
    isLoggedIn: {
      type: DataTypes.BOOLEAN,
      allowNull: false,
      defaultValue: false,
    },
    roleId: {
      type: DataTypes.INTEGER,
      references: { model: "roles", key: "id" },
    },
    createdBy: {
      type: DataTypes.INTEGER,
      references: { model: "users", key: "id" },
    },
    updatedBy: {
      type: DataTypes.INTEGER,
      references: { model: "users", key: "id" },
    },
  },
  {
    timestamps: true,
    tableName: "users",
    paranoid: true,
    version: true,
    freezeTableName: true,
  }
);

User.belongsTo(Country, { foreignKey: "countryId" });
User.belongsTo(Role, { foreignKey: "roleId" });
User.belongsTo(User, { foreignKey: "createdBy", as: "uCreatedBy" });
User.belongsTo(User, { foreignKey: "updatedBy", as: "uUpdatedBy" });

User.sync();
// User.sync({ alter: true });

module.exports = User;
